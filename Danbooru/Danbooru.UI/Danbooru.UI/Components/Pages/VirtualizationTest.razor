@page "/virtualize"

@using Danbooru.ApiWrapper.Interfaces
@using Danbooru.ApiWrapper.Models

@attribute [StreamRendering]
@rendermode InteractiveServer

<h3>VirtualizationTest</h3>

<Virtualize Context="post" ItemsProvider="LoadPosts">
    @if (!post.IsImage)
    {
        <div class="meta-data">
            @{
                string duration = post.MediaAsset?.Duration?.ToString() ?? "0";
                double durationInTime = Convert.ToDouble(duration, System.Globalization.CultureInfo.InvariantCulture);
                double durationInTimeRounded = Math.Round(durationInTime, 2);
            }
            <p>@durationInTimeRounded seconds</p>
        </div>

        <img style="background-image: url(@post.PreviewFileUrl);"
             src="@post.PreviewFileUrl" />
    }
    else
    {
        <img style="background-image: url(@post.PreviewFileUrl);"
             src="@post.LargeFileUrl" />
    }
</Virtualize>

@code {

    [Inject]
    public IDanbooruWrapper DanbooruWrapper { get; set; }

    private List<Post> _posts = new();
    private int _highestId = int.MaxValue;
    private bool _isFirstSearch = false;

    protected override async Task OnInitializedAsync()
    {
        _posts = await DanbooruWrapper.Posts.GetPostsAsync();
    }

    private async ValueTask<ItemsProviderResult<Post>> LoadPosts(ItemsProviderRequest request)
    {
        int amountOfItemsRequested = request.Count;

        List<Post> postsRetrieved = await DanbooruWrapper.Posts.GetPostsByIdAsync(_highestId, amountOfItemsRequested);

        _posts.AddRange(postsRetrieved);

        if (!_isFirstSearch)
        {
            var postWithHighestId = _posts.OrderByDescending(x => x.Id).Take(1).ToList();
            _highestId = postWithHighestId[0].Id;
        }

        _isFirstSearch = false;

        return new(postsRetrieved, amountOfItemsRequested);
    }

}
