@page "/doom-scroll"
@rendermode InteractiveServer

@using Danbooru.ApiWrapper.Enums
@using Danbooru.ApiWrapper.Interfaces
@using Danbooru.ApiWrapper.Models
@using Sve.Blazor.InfiniteScroll.Components


<section class="search-options-container">
    <div class="rating-container">
        <div class="option @(_contentRating == ContentRating.General ? "active" : String.Empty)" 
            @onclick="() => HandleOnRadioButtonClick(ContentRating.General)">
            <p>General</p>
        </div>

        <div class="option @(_contentRating == ContentRating.Sensitive ? "active" : String.Empty)" 
            @onclick="() => HandleOnRadioButtonClick(ContentRating.Sensitive)">
            <p>Sensitive</p>
        </div>

        <div class="option @(_contentRating == ContentRating.Questionable ? "active" : String.Empty)" 
            @onclick="() => HandleOnRadioButtonClick(ContentRating.Questionable)">
            <p>Questionable</p>
        </div>

        <div class="option @(_contentRating == ContentRating.Explicit ? "active" : String.Empty)" 
            @onclick="() => HandleOnRadioButtonClick(ContentRating.Explicit)">
            <p>Explicit</p>
        </div>
    </div>

    <div class="input-section">

        <input autocomplete="off" spellcheck="false" type="text" @bind-value="_searchQuery" name="search-after-tag" list="tags" @oninput="OnSearchInputChanged" />

        <div class="auto-complete-suggestions">
            @if (_tags is not null)
            {
                foreach (var tag in _tags)
                {
                    <div class="auto-complete-option" @onclick="() => HandleTagSelected(tag)">
                        <p>@tag.Value</p>
                    </div>
                }
            }
        </div>

    </div>

    <div class="selected-tags-container">
        @foreach (var tag in _selectedTags)
        {
            <div class="selected-tag">
                <div>
                    <p>@tag.Label (@tag.PostCount)</p>
                </div>
                <div @onclick="() => RemoveSelectedTag(tag)">
                    <p>✖</p>
                </div>
            </div>
        }
    </div>

    <div class="button-container">
        <button type="button" @onclick="HandleSearchButtonClicked">Search</button>
    </div>
</section>

<section class="search-results-container">
    <div class="results">
        <InfiniteScroll ObserverTargetId="observerTarget" ObservableTargetReached="(e) => FetchImages()">
            @foreach (var post in _posts)
            {
                <div class="media-result">
                    @if (!post.IsImage)
                    {
                        <div class="meta-data">
                            @{
                                string duration = post.MediaAsset?.Duration?.ToString() ?? "0";
                                double durationInTime = Convert.ToDouble(duration, System.Globalization.CultureInfo.InvariantCulture);
                                double durationInTimeRounded = Math.Round(durationInTime, 2);
                            }
                            <p>@durationInTimeRounded seconds</p>
                            <p>@post.FileExt</p>
                        </div>

                        <video controls="controls" src="@post.LargeFileUrl" loop="loop" poster="@post.PreviewFileUrl">

                        </video>
                    }
                    else
                    {
                        <img style="background-image: url(@post.PreviewFileUrl);" src="@post.LargeFileUrl" />
                    }
                </div>
            }

            @* The target element that we observe. Once this is reached the callback will be triggered. *@
            <li class="list-group-item" id="observerTarget"></li>
        </InfiniteScroll>
    </div>
</section>