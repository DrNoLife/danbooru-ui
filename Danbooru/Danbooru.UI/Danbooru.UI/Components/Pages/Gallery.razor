@page "/"
@page "/Page/{PageNumber:int}"
@page "/Search/{SearchTerm}"
@page "/Search/{SearchTerm}/Page/{PageNumber:int}"

@using Danbooru.UI.Client.Pages
@using Danbooru.ApiWrapper.Interfaces
@using Danbooru.ApiWrapper.Models
@using Danbooru.ApiWrapper.Models.Url
@using Danbooru.UI.Components.Layout
@using Danbooru.UI.Interfaces
@using Danbooru.UI.Models
@using Microsoft.AspNetCore.WebUtilities

<PageTitle>Imeji | Gallery</PageTitle>

<Header />

<section class="gallery-options-section">
    <GalleryOptions />
</section>

<section class="gallery @(_options.IsDisplayTypeCard ? "card" : String.Empty)" style="grid-template-columns: repeat(auto-fill, minmax(@(_options.ImageWidth)px, 1fr));">

    @foreach (var post in _posts)
    {
        @if (!String.IsNullOrEmpty(post.PreviewFileUrl))
        {
            <div class="post">
                <a href="/post/@post.Id">
                    @if(!post.IsImage)
                    {
                        <div class="meta-data">
                            @{
                                string duration = post.MediaAsset?.Duration?.ToString() ?? "0";
                                double durationInTime = Convert.ToDouble(duration, System.Globalization.CultureInfo.InvariantCulture);
                                double durationInTimeRounded = Math.Round(durationInTime, 2);
                            }
                            <p>@durationInTimeRounded seconds</p>
                        </div>

                        <img loading="lazy"
                             style="background-image: url(@post.PreviewFileUrl); aspect-ratio: @(_options.AspectRatio)"
                             src="@post.PreviewFileUrl" />
                    }
                    else
                    {
                        <img loading="lazy"
                             style="background-image: url(@post.PreviewFileUrl); aspect-ratio: @(_options.AspectRatio)"
                             src="@post.LargeFileUrl" />
                    }
                </a>
            </div>
        }
    }

</section>

<section class="pagination-container">
    @for (int i = _paginationMinPageNumber; i <= _paginationMaxPageNumber; i++)
    {
        var url = String.IsNullOrEmpty(SearchTerm) ? $"/Page/{i}" : $"/Search/{SearchTerm}/Page/{i}";

        url += GallerySettingsService.GenerateQueryString();

        if (i == _internalPageNumber)
        {
            <a class="active-page" href="@url">@i</a>
        }
        else
        {
            <a href="@url">@i</a>
        }
    }
</section>


@code {
    [Inject]
    public IDanbooruWrapper DanbooruWrapper { get; set; }

    [Inject]
    public IGallerySettingsService GallerySettingsService { get; set; }

    [Parameter]
    public int PageNumber { get; set; }

    [Parameter]
    public string? SearchTerm { get; set; }

    private List<Post> _posts = new();

    private int _paginationMinPageNumber;
    private int _paginationMaxPageNumber;
    private int _internalPageNumber = 1;
    private int _paginationStep = 5;

    private GalleryOptionsModel _options = new();

    protected override async Task OnInitializedAsync()
    {
        _options = GallerySettingsService.GetGalleryOptions();
        CalculatePaginationStuff();

        var parameters = new UrlParameters()
        {
            PageItems = 50,
            Page = _internalPageNumber
        };

        _posts = String.IsNullOrEmpty(SearchTerm) 
            ? await DanbooruWrapper.Posts.GetPostsAsync(parameters) 
            : await DanbooruWrapper.Posts.GetPostsByTagsAsync(SearchTerm.Split(' '), parameters);
    }

    

    private void CalculatePaginationStuff()
    {
        _internalPageNumber = PageNumber == 0 ? 1 : PageNumber;
        _paginationMinPageNumber = Math.Max(_internalPageNumber - _paginationStep, 1);
        _paginationMaxPageNumber = _internalPageNumber + _paginationStep;
    }
}