@using Danbooru.ApiWrapper.Interfaces
@using Danbooru.ApiWrapper.Models
@rendermode InteractiveWebAssembly

<section class="search-container">
    <form @onsubmit="HandleSearch" name="tag-form-searching">
        <section class="input-section">

            <input autocomplete="off" spellcheck="false" type="text" name="search-after-tag" list="tags" @bind-value="SearchQuery" @oninput="OnSearchInputChanged" />

            <div class="auto-complete-suggestions">
                @if (_tags is not null)
                {
                    foreach (var tag in _tags)
                    {
                        <div class="auto-complete-option" @onclick="() => HandleTagSelected(tag)">
                            <p>@tag.Value</p>
                        </div>
                    }
                }
            </div>
        </section>

        <button type="submit">Search</button>
    </form>
</section>

@code {
    public string SearchQuery { get; set; }
    public string SearchQueryBehind { get; set; }

    [Inject]
    public IDanbooruWrapper DanbooruWrapper { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    private CancellationTokenSource cancellationTokenSource = new CancellationTokenSource();
    private const int debouncePeriod = 250;
    private string currentInputValue;

    private List<TagAutocomplete>? _tags;

    private List<TagAutocomplete> _selectedTags = new();

    private async Task OnSearchInputChanged(ChangeEventArgs args)
    {
        currentInputValue = args.Value?.ToString().Trim();

        var currentValueButSplit = currentInputValue.Split(' ');

        if (currentValueButSplit.Length > _selectedTags.Count)
        {
            var valuesToSearchAfterArray = currentValueButSplit[_selectedTags.Count..];
            var valuesToSearchAfter = String.Join(' ', valuesToSearchAfterArray);

            currentInputValue = valuesToSearchAfter;
        }


        cancellationTokenSource.Cancel();
        cancellationTokenSource = new CancellationTokenSource();

        try
        {
            await Task.Delay(debouncePeriod, cancellationTokenSource.Token);
            await PerformSearchAsync();
        }
        catch (TaskCanceledException)
        {
            // Task was cancelled, do nothing
        }
    }

    private async Task PerformSearchAsync()
    {
        //SearchQuery = currentInputValue;

        if (String.IsNullOrEmpty(currentInputValue))
        {
            //await GoToIndex();
            return;
        }

        _tags = await DanbooruWrapper.Tags.AutocompleteAfterTag(currentInputValue);
    }

    public void Dispose()
    {
        cancellationTokenSource?.Cancel();
    }

    private async Task HandleSearch()
    {
        if (String.IsNullOrEmpty(SearchQuery))
        {
            return;
        }

        NavigationManager.NavigateTo($"/Search/{SearchQuery.Trim()}");
    }

    private async Task GoToIndex()
    {
        NavigationManager.NavigateTo("/");
    }

    private void HandleTagSelected(TagAutocomplete selectedTag)
    {
        if (_selectedTags.Contains(selectedTag))
        {
            return;
        }

        _selectedTags.Add(selectedTag);
        _tags.Clear();
        SearchQueryBehind += $" {selectedTag.Value}";
        SearchQuery = SearchQueryBehind;
        StateHasChanged();
    }
}